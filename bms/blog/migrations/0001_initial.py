# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-21 15:24
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nick_name', models.CharField(max_length=32, verbose_name='昵称')),
                ('join_time', models.DateTimeField(auto_now_add=True, verbose_name='加入时间')),
                ('telephone', models.CharField(max_length=11, null=True, unique=True, verbose_name='手机号')),
                ('email', models.EmailField(max_length=254, verbose_name='联系邮箱')),
                ('avatar', models.FileField(default='media/img/avatar/default.png', upload_to='avatar', verbose_name='头像')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户表',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=64, verbose_name='文章标题')),
                ('summary', models.CharField(max_length=512, verbose_name='文章概要')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now_add=True, verbose_name='修改时间')),
                ('read_count', models.IntegerField(verbose_name='阅读次数')),
                ('comment_count', models.IntegerField(verbose_name='评论次数')),
                ('up_count', models.IntegerField(verbose_name='点赞次数')),
                ('down_count', models.IntegerField(verbose_name='反对次数')),
            ],
            options={
                'verbose_name_plural': '文章表',
            },
        ),
        migrations.CreateModel(
            name='ArticleDetail',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.TextField(max_length=20480, verbose_name='文章内容')),
            ],
            options={
                'verbose_name_plural': '文章内容表',
            },
        ),
        migrations.CreateModel(
            name='ArticleUpDown',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_like', models.BooleanField(verbose_name='点赞or反对')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Article', verbose_name='关联文章')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='关联用户')),
            ],
            options={
                'verbose_name_plural': '文章点赞表',
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_site', models.CharField(max_length=64, unique=True, verbose_name='blog站点')),
                ('blog_title', models.CharField(max_length=64, verbose_name='博客标题')),
                ('theme', models.CharField(max_length=16, verbose_name='主题')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name_plural': '博客表',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='文章分类名')),
                ('article_count', models.IntegerField(verbose_name='文章数量')),
                ('description', models.CharField(max_length=64, verbose_name='分类描述')),
                ('create_time', models.DateTimeField(verbose_name='创建时间')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Blog', verbose_name='所属博客')),
            ],
            options={
                'verbose_name_plural': '分类表',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=512, verbose_name='评论内容')),
                ('create_time', models.DateTimeField(verbose_name='评论时间')),
                ('up_count', models.IntegerField(default=0, verbose_name='点赞数')),
                ('down_count', models.IntegerField(default=0, verbose_name='反对数')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Article', verbose_name='文章')),
                ('father_comment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Comment', verbose_name='上级评论id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评论用户')),
            ],
            options={
                'verbose_name_plural': '评论表',
            },
        ),
        migrations.CreateModel(
            name='CommentUpDown',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_like', models.BooleanField(verbose_name='点赞or反对')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Comment', verbose_name='关联评论')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='关联用户')),
            ],
            options={
                'verbose_name_plural': '评论点赞表',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=16)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Blog', verbose_name='所属博客')),
            ],
            options={
                'verbose_name_plural': '标签表',
            },
        ),
        migrations.CreateModel(
            name='Tag2Article',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Article')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Tag', verbose_name='标签')),
            ],
            options={
                'verbose_name_plural': '标签文章表',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='文章类型名称')),
            ],
            options={
                'verbose_name_plural': '文章类型表',
            },
        ),
        migrations.CreateModel(
            name='TypeCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='分类')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Type', verbose_name='文章类型')),
            ],
            options={
                'verbose_name_plural': '文章类型分类表',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='article_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='blog.ArticleDetail', verbose_name='文章详细'),
        ),
        migrations.AddField(
            model_name='article',
            name='blog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Blog', verbose_name='博客'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Category', verbose_name='文章分类'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(through='blog.Tag2Article', to='blog.Tag', verbose_name='文章标签'),
        ),
        migrations.AddField(
            model_name='article',
            name='type_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.TypeCategory', verbose_name='文章类型分类名称'),
        ),
        migrations.AlterUniqueTogether(
            name='tag2article',
            unique_together=set([('tag', 'article')]),
        ),
    ]
